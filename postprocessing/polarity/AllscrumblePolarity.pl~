#!/usr/bin/perl
$argc = @ARGV;

if ($argc != 3)   
{
    print "usage: \n perl scrummbleTest.pl sequence_file cost_file outputfilename_for_random_data\n";
    exit;
}
my $seq_file = $ARGV[0];
my $costfile = $ARGV[1];
my $numberofsimulations=1;
my $numberofiterations=50;
my $outputfile=$ARGV[2];
my $mod_structu_flag=0;
my $breakeven_flag=1;





# putting number of interations zero in the call scrumbletest disables
# unit swaps

# setting modular structure flag 1 imposes using modular strucutre
$argstring="scrummbleTestPolar.pl $seq_file $costfile 0 $seq_file.polarscrumb $mod_structu_flag $breakeven_flag";

$retcode=system($argstring);
if($retcode ne 0){
    print STDERR "\n failure: $argstring\n";
    exit -1;
}




for($i=0;$i<$numberofsimulations;$i++){    
    $argstring="scrummbleTestPolar.pl $seq_file $costfile $numberofiterations $outputfile $mod_structu_flag $breakeven_flag";    
    $retcode=system($argstring);

    if($retcode ne 0){
	print STDERR "\n failure: $argstring\n";
	exit -1;
    }

    #print "Scrumble test number ". ($i+1)."  done\n"; 
    
}


$argstring="plotbreakeven.pl $seq_file.polarscrumb.align.both  $outputfile.align.both";
print "Running: $argstring\n";

$retcode=system($argstring);
if($retcode ne 0){
    print STDERR "\n failure: $argstring\n";
    exit -1;
}


exit (0);
